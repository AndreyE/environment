if [ -z $BASHRC_ANLIZEV_SOURCE_GUARD ]
then
export BASHRC_ANLIZEV_SOURCE_GUARD=defined

# SSH agent
SSH_ENV="$HOME/.ssh/environment"

function start_agent {
    echo "Initialising new SSH agent..."
    /usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
    echo succeeded
    chmod 600 "${SSH_ENV}"
    . "${SSH_ENV}" > /dev/null
    /usr/bin/ssh-add;
}

# Source SSH settings, if applicable

if [ -f "${SSH_ENV}" ]; then
    . "${SSH_ENV}" > /dev/null
    #ps ${SSH_AGENT_PID} doesn't work under cywgin
    ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
    start_agent;
}
else
    start_agent;
fi

fi # if [ -z $BASHRC_ANLIZEV_SOURCE_GUARD ]

# aliases
alias rsync="rsync -l --progress"
alias emacs="emacs -nw"
alias grepsrc='gfind . -type f -regex "^.*\.cpp$\|^.*\.c$\|^.*\.h$\|^.*\.hpp$\|^.*\.cxx$\|^.*\.hxx$" | gsed "s/ /\\\ /g" | ggrep -v "^.*\.svn/.*$" | gxargs grep --color=always -n'
alias grepcmake='gfind . -regex "^.*CMakeLists\.txt$\|^.*\.cmake$" | gsed "s/ /\\\ /g" | gxargs grep --color=always -n'
alias grepmake='gfind . -regex "^.*Makefile$\|^.*\.mk$" | gsed "s/ /\\\ /g" | gxargs grep --color=always -n'
alias greppy='gfind . -type f -regex "^.*\.py$" | gsed "s/ /\\\ /g" | ggrep -v "^.*\.svn/.*$" | gxargs grep --color=always -n'
alias less="less -R"
alias passgen='shuf -zer -n20  {A..Z} {a..z} {0..9}; echo ""'

# SVN
alias svn-clear="svn status | perl -lne 'if(/^\?\s+(.*?)$/){ print \$1 }' | gxargs -t rm -r"

# environment
# output in english for programs started in console
export LC_ALL=en_US.UTF-8
export GIT_EDITOR='emacs -nw'
export EDITOR='emacs -nw'

# My default make options
# -j run in parallel
# -O sync parallel output
# -l don't consume more than 50% of system resources
# MAKEFLAGS="-j $(expr $(nproc) / 2) -O --print-directory"

#export WORKON_HOME=$HOME/virtualenvs
#source /usr/share/virtualenvwrapper/virtualenvwrapper.sh

ssh-add -K >& /dev/null

export PATH=$PATH:/usr/local/opt/curl/bin


# LLVM installed with `brew install llvm`
# To use the bundled libc++ please add the following LDFLAGS:
#   LDFLAGS="-L/usr/local/opt/llvm/lib -Wl,-rpath,/usr/local/opt/llvm/lib"
#
# llvm is keg-only, which means it was not symlinked into /usr/local,
# because macOS already provides this software and installing another version in
# parallel can cause all kinds of trouble.
#
# If you need to have llvm first in your PATH, run:
#   echo 'export PATH="/usr/local/opt/llvm/bin:$PATH"' >> /Users/anlizev/.bash_profile
#
# For compilers to find llvm you may need to set:
#   export LDFLAGS="-L/usr/local/opt/llvm/lib"
#   export CPPFLAGS="-I/usr/local/opt/llvm/include"
#
export LDFLAGS="-L/usr/local/opt/llvm/lib -Wl,-rpath,/usr/local/opt/llvm/lib"
export CPPFLAGS="-I/usr/local/opt/llvm/include"
export PATH="/usr/local/opt/llvm/bin:$PATH"